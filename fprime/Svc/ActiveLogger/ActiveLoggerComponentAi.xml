<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../Autocoders/schema/ISF/component_schema.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>


<component name="ActiveLogger" kind="active" namespace="Svc">
    <import_port_type>Fw/Log/LogPortAi.xml</import_port_type>
    <import_port_type>Fw/Com/ComPortAi.xml</import_port_type>
    <import_port_type>Fw/Log/LogPortAi.xml</import_port_type>
    <import_port_type>Svc/Fatal/FatalEventPortAi.xml</import_port_type>
    <import_port_type>Svc/Ping/PingPortAi.xml</import_port_type>
    <comment>A component for storing telemetry</comment>
    <ports>
        <port name="LogRecv" data_type="Fw::Log" kind="sync_input" >
            <comment>
            Telemetry input port
            </comment>
        </port>
        <port name="PktSend" data_type="Fw::Com" kind="output" >
            <comment>
            Packet send port
            </comment>
        </port>
        <port name="FatalAnnounce" data_type="Svc::FatalEvent" kind="output" >
            <comment>
            FATAL event announce port
            </comment>
        </port>
        <port name="pingIn" data_type="Svc::Ping" kind="async_input"  max_number = "1">
            <comment>
            Ping input port
            </comment>
        </port>
        <port name="pingOut" data_type="Svc::Ping" kind="output"  max_number = "1">
            <comment>
            Ping output port
            </comment>
        </port>
    </ports>
    <commands opcode_base = "$ActiveLoggerOpcodeBase">
        <command kind="sync" opcode="0" mnemonic="ALOG_SET_EVENT_REPORT_FILTER">
            <comment>
            Set filter for reporting events. Events are not stored in component. 
            </comment>
            <args>
                <arg name="FilterLevel" type="ENUM">
                    <enum name="InputFilterLevel">
                        <item name="INPUT_WARNING_HI"/>
                        <item name="INPUT_WARNING_LO"/>
                        <item name="INPUT_COMMAND"/>
                        <item name="INPUT_ACTIVITY_HI"/>
                        <item name="INPUT_ACTIVITY_LO"/>
                        <item name="INPUT_DIAGNOSTIC"/>
                    </enum>
                    <comment>Filter level</comment>
                </arg>          
                <arg name="FilterEnable" type="ENUM">
                    <enum name="InputFilterEnabled">
                        <item name="INPUT_ENABLED"/>
                        <item name="INPUT_DISABLED"/>
                    </enum>
                    <comment>Filter state</comment>
                </arg>
             </args>
        </command>
        <command kind="sync" opcode="1" mnemonic="ALOG_SET_EVENT_SEND_FILTER">
            <comment>
            Set filter for sending events. Event will not be sent as a buffer. 
            </comment>
            <args>
                <arg name="FilterLevel" type="ENUM">
                    <enum name="SendFilterLevel">
                        <item name="SEND_WARNING_HI"/>
                        <item name="SEND_WARNING_LO"/>
                        <item name="SEND_COMMAND"/>
                        <item name="SEND_ACTIVITY_HI"/>
                        <item name="SEND_ACTIVITY_LO"/>
                        <item name="SEND_DIAGNOSTIC"/>
                    </enum>
                    <comment>Filter level</comment>
                </arg>          
                <arg name="FilterEnable" type="ENUM">
                    <enum name="SendFilterEnabled">
                        <item name="SEND_ENABLED"/>
                        <item name="SEND_DISABLED"/>
                    </enum>
                    <comment>Severity filter state</comment>
                </arg>
             </args>
        </command>
        <command kind="async" opcode="2" mnemonic="ALOG_DUMP_EVENT_LOG">
            <comment>
            Dump circular buffers of events to a file 
            </comment>
            <args>
                <arg name="filename" type="string" size="40">
                </arg>
            </args>
        </command>
        <command kind="async" opcode="3" mnemonic="ALOG_SET_ID_FILTER">
            <comment>
            Filter a particular ID 
            </comment>
            <args>
                <arg name="ID" type="U32" comment="ID to filter">
                </arg>
                <arg name="IdFilterEnable" type="ENUM">
                    <enum name="IdFilterEnabled">
                        <item name="ID_ENABLED"/>
                        <item name="ID_DISABLED"/>
                    </enum>
                    <comment>ID filter state</comment>
                </arg>
            </args>
        </command>
        <command kind="async" opcode="4" mnemonic="ALOG_DUMP_FILTER_STATE">
            <comment>
            Dump the filter states via events
            </comment>
        </command>
    </commands>
    <events event_base = "$ActiveLoggerEventsBase">
        <!-- A test event -->
        <event id="0" name="ALOG_FILE_WRITE_ERR" severity="WARNING_HI" format_string = "Event buffer write failed in stage %d with error %d" >
            <comment>
            Failed to write circular buffer
            </comment>
            <args>
                <arg name="stage" type="ENUM">
                    <enum name="LogWriteError">
                        <item name="LOG_WRITE_OPEN"/>
                        <item name="LOG_WRITE_FATAL_DELIMETER"/>
                        <item name="LOG_WRITE_FATAL_RECORD"/>
                        <item name="LOG_WRITE_WARNING_HI_DELIMETER"/>
                        <item name="LOG_WRITE_WARNING_HI_RECORD"/>
                        <item name="LOG_WRITE_WARNING_LO_DELIMETER"/>
                        <item name="LOG_WRITE_WARNING_LO_RECORD"/>
                        <item name="LOG_WRITE_COMMAND_DELIMETER"/>
                        <item name="LOG_WRITE_COMMAND_RECORD"/>
                        <item name="LOG_WRITE_ACTIVITY_HI_DELIMETER"/>
                        <item name="LOG_WRITE_ACTIVITY_HI_RECORD"/>
                        <item name="LOG_WRITE_ACTIVITY_LO_DELIMETER"/>
                        <item name="LOG_WRITE_ACTIVITY_LO_RECORD"/>
                        <item name="LOG_WRITE_DIAGNOSTIC_DELIMETER"/>
                        <item name="LOG_WRITE_DIAGNOSTIC_RECORD"/>
                    </enum>
                    <comment>The write stage</comment>
                </arg>          
                <arg name="error" type="I32">
                    <comment>The error code</comment>
                </arg>          
            </args>
        </event>
        <event id="1" name="ALOG_FILE_WRITE_COMPLETE" severity="ACTIVITY_HI" format_string = "Event buffer write complete. Wrote %d records." >
            <comment>
            Evemt log file write complete
            </comment>
            <args>
                <arg name="records" type="U32">
                    <comment>number of records written</comment>
                </arg>          
            </args>
        </event>
        <event id="2" name="ALOG_SEVERITY_FILTER_STATE" severity="ACTIVITY_LO" format_string = "%d filter state. Recv: %d Send: %d" >
            <comment>
            Dump severity filter state
            </comment>
            <args>
                <arg name="severity" type="ENUM">
                    <enum name="EventFilterState">
                        <item name="EVENT_FILTER_WARNING_HI"/>
                        <item name="EVENT_FILTER_WARNING_LO"/>
                        <item name="EVENT_FILTER_COMMAND"/>
                        <item name="EVENT_FILTER_ACTIVITY_HI"/>
                        <item name="EVENT_FILTER_ACTIVITY_LO"/>
                        <item name="EVENT_FILTER_DIAGNOSTIC"/>
                    </enum>
                    <comment>The severity level</comment>
                </arg>
                <arg name="recvEnabled" type="bool">
                </arg>
                <arg name="sendEnabled" type="bool">
                </arg>
            </args>
        </event>
        <event id="3" name="ALOG_ID_FILTER_ENABLED" severity="ACTIVITY_HI" format_string = "ID %d is filtered." >
            <comment>
            Indicate ID is filtered
            </comment>
            <args>
                <arg name="ID" type="U32">
                    <comment>The ID filtered</comment>
                </arg>
            </args>
        </event>
        <event id="4" name="ALOG_ID_FILTER_LIST_FULL" severity="WARNING_LO" format_string = "ID filter list is full. Cannot filter %d ." >
            <comment>
            Attempted to add ID to full ID filter ID
            </comment>
            <args>
                <arg name="ID" type="U32">
                    <comment>The ID filtered</comment>
                </arg>
            </args>
        </event>
        <event id="5" name="ALOG_ID_FILTER_REMOVED" severity="ACTIVITY_HI" format_string = "ID filter ID %d removed." >
            <comment>
            Removed an ID from the filter
            </comment>
            <args>
                <arg name="ID" type="U32">
                    <comment>The ID removed</comment>
                </arg>
            </args>
        </event>
        <event id="6" name="ALOG_ID_FILTER_NOT_FOUND" severity="WARNING_LO" format_string = "ID filter ID %d not found." >
            <comment>
            ID not in filter
            </comment>
            <args>
                <arg name="ID" type="U32">
                    <comment>The ID removed</comment>
                </arg>
            </args>
        </event>
    </events>
    <internal_interfaces>
        <internal_interface name="loqQueue" priority="1" full="drop">
            <comment>
            internal interface to send log messages to component thread
            </comment>
            <args>
                <arg name="id" type="FwEventIdType">
                    <comment>Log ID</comment>
                </arg>
                <arg name="timeTag" type="Fw::Time" pass_by="reference">
                    <comment>Time Tag</comment>
                </arg>
                <arg name="severity" type="ENUM">
                    <enum name="QueueLogSeverity">
                        <item name="QUEUE_LOG_FATAL" value="1" comment="A fatal non-recoverable event"/>
                        <item name="QUEUE_LOG_WARNING_HI" value="2" comment="A serious but recoverable event"/>
                        <item name="QUEUE_LOG_WARNING_LO" value="3" comment="A less serious but recoverable event"/>
                        <item name="QUEUE_LOG_COMMAND" value="4" comment="An activity related to commanding"/>
                        <item name="QUEUE_LOG_ACTIVITY_HI" value="5" comment="Important informational events"/>           
                        <item name="QUEUE_LOG_ACTIVITY_LO" value="6" comment="Less important informational events"/>           
                        <item name="QUEUE_LOG_DIAGNOSTIC" value="7" comment="Software diagnostic events"/>           
                    </enum>
                    <comment>The severity argument</comment>
                </arg>
                <arg name="args" type="Fw::LogBuffer" pass_by="reference">
                    <comment>Buffer containing serialized log entry</comment>
                </arg>
            </args>
        </internal_interface>
    </internal_interfaces>    
</component>

